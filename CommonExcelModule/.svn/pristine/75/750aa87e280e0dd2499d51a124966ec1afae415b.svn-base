
package com.fouri.commonexcelmodule.model.am;


import com.fouri.commonexcelmodule.model.am.common.AppModule;
import com.fouri.commonexcelmodule.model.vo.ActionsROVOImpl;

import java.sql.CallableStatement;

import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
import java.util.Map;
import java.util.HashMap;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 09 12:28:28 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for DummyROVO1.
     * @return DummyROVO1
     */
    public ViewObjectImpl getDummyROVO1() {
        return (ViewObjectImpl) findViewObject("DummyROVO1");
    }

    /**
     * Container's getter for InterfaceROVO1.
     * @return InterfaceROVO1
     */
    public ViewObjectImpl getInterfaceROVO1() {
        return (ViewObjectImpl) findViewObject("InterfaceROVO1");
    }
    
    /**
     * Container's getter for xxdmexcelstgmappingROVO1.
     * @return xxdmexcelstgmappingROVO1
     */
    public ViewObjectImpl getxxdmexcelstgmappingROVO1() {
        return (ViewObjectImpl) findViewObject("xxdmexcelstgmappingROVO1");
    }

    /**
     * Container's getter for ActionsROVO1.
     * @return ActionsROVO1
     */
    public ActionsROVOImpl getActionsROVO1() {
        return (ActionsROVOImpl) findViewObject("ActionsROVO1");
    }
    
    public String uploadData(String ifaceId,String parentIfaceId,Map processedData){
        String returnValue=null;
        String batchId = getSequence("xxdm_batch_id_s");
        ViewObject vo = getInterfaceROVO1();
        if(ifaceId!=null){
            vo.applyViewCriteria(vo.getViewCriteriaManager().getViewCriteria("byIfaceId"),false);
            vo.setNamedWhereClauseParam("b_ifaceId", ifaceId);
        }
        else{
            vo.applyViewCriteria(vo.getViewCriteriaManager().getViewCriteria("byParentIfaceId"),false);
            vo.setNamedWhereClauseParam("b_parentIfaceId", parentIfaceId);
        }
        vo.setRangeSize(-1);
        vo.executeQuery();
        if(processedData.size()!= vo.getEstimatedRowCount()){
            return "sheetError";
        }
        Row[] rows = vo.getAllRowsInRange();
        ViewObject mappingvo;
        Row[] innerRows;
        Row row;
        Row innerRow;
        ArrayList defaultValueList;
        ArrayList dataTypeList;
        ArrayList columnNameList;
        ArrayList displayInPage;
        CallableStatement cst = null;
        String insertQuery = null;
        for(int i=0;i<rows.length;i++){
            defaultValueList = new ArrayList<String>();
            dataTypeList = new ArrayList<String>();
            columnNameList = new ArrayList<String>(); 
            displayInPage = new ArrayList<String>(); 
            row = rows[i];
            String stagingTable = row.getAttribute("StagingTable").toString();
            Map stagingData = (Map)processedData.get(stagingTable);
            if(stagingData==null){
                return "sheetError";
            }
            mappingvo = getxxdmexcelstgmappingROVO1();
            mappingvo.applyViewCriteria(mappingvo.getViewCriteriaManager().getViewCriteria("forUpload"));
            mappingvo.setNamedWhereClauseParam("b_ifaceId", row.getAttribute("IfaceId"));
            mappingvo.setRangeSize(-1);
            mappingvo.executeQuery();
            innerRows = mappingvo.getAllRowsInRange();
            String defaultValue;
            String dataType;
            String columnName;
            String displayPage;
            DBTransaction bdTransaction = this.getDBTransaction();
            System.out.println("Staging table:"+stagingTable);
            for(int count=0;count<innerRows.length;count++){
                innerRow = innerRows[count];
                defaultValue = innerRow.getAttribute("DefaultValue")!=null ? innerRow.getAttribute("DefaultValue").toString() : "N/A";
                dataType = innerRow.getAttribute("DataType")!=null ? innerRow.getAttribute("DataType").toString() : null;
                columnName = innerRow.getAttribute("StgColumnName")!=null ? innerRow.getAttribute("StgColumnName").toString() : null;
                displayPage = innerRow.getAttribute("DisplayInPage")!=null ? innerRow.getAttribute("DisplayInPage").toString() : null;
                if(innerRow.getAttribute("StgColumnName").toString().equalsIgnoreCase("BATCH_ID")){
                    defaultValue = batchId;
                }
                defaultValueList.add(defaultValue);
                dataTypeList.add(dataType);
                columnNameList.add(columnName);
                displayInPage.add(displayPage);
            }
            Object[] keys = stagingData.keySet().toArray();
            System.out.println("No.Of records:"+keys.length);
            for(int j=0;j<keys.length;j++){
                insertQuery="";
                Map columnData = (Map)stagingData.get(keys[j]);
                String colName = "";
                for(int column=0;column<columnNameList.size();column++){
                    if(column==0){
                        colName = colName + columnNameList.get(column);
                    }else{
                        colName = colName + "," + columnNameList.get(column); 
                    }
                }
                insertQuery = "INSERT INTO "+stagingTable+"("+colName+") VALUES(";
                for(int col=0;col<defaultValueList.size();col++){
                    int defaultFlag = 0;
                    String temp;
                    if(displayInPage.get(col)!=null && displayInPage.get(col).toString().equals("Y"))
                    {
                        if(columnData.get(col)==null){
                            defaultFlag = 1;
                        }
                        temp = (String)(columnData.get(col) !=null ? columnData.get(col) : defaultValueList.get(col));
                    }
                    else{
                        temp =  (String)defaultValueList.get(col);
                    }
                    if(temp.equalsIgnoreCase("N/A")){
                        temp=null;
                    }
                    if(dataTypeList.get(col).toString().equals("NUMBER"))
                    {
                        if(col==0){
                            insertQuery = insertQuery.concat(temp);
                        }
                        else{
                            insertQuery = insertQuery.concat(","+temp);
                        }
                    }
                    else if(dataTypeList.get(col).toString().equals("VARCHAR")){
                        if(col==0){
                            if(temp!=null){
                                insertQuery = insertQuery.concat("'"+temp+"'");
                            }
                            else{
                                insertQuery = insertQuery.concat(""+temp);
                            }
                        } else{
                            if(temp!=null){
                                insertQuery = insertQuery.concat(",'"+temp+"'");
                            }
                            else{
                                insertQuery = insertQuery.concat(","+temp);
                            }
                        }
                    }
                    else if(dataTypeList.get(col).toString().equals("DATE")){
                        if(defaultFlag==1){
                            if(col==0){
                                insertQuery = insertQuery.concat(temp);
                            }
                            else{
                                insertQuery = insertQuery.concat(","+temp);
                            }
                        }else if(defaultFlag==0){
                            if(col==0){
                                insertQuery = insertQuery.concat(temp);
                            }
                            else{
                                insertQuery = insertQuery.concat(","+temp);
                            }
                        }
                    }
                }
                insertQuery = insertQuery.concat(")");
                try{
                cst = bdTransaction.createCallableStatement(insertQuery, 0);
                cst.executeUpdate();
                if(cst!=null && !cst.isClosed()){
                    cst.close();
                }
                }
                catch(Exception e){
                    e.printStackTrace();
                    System.out.println("Exception at execute Query");
                    this.getDBTransaction().rollback();
                    returnValue="issueinupload";
                    break;
                }
                finally{
                    try {
                        if (cst!=null && !cst.isClosed()) {
                            cst.close();
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
            if(returnValue==null){
                returnValue = batchId;
            }
        }
        
        return returnValue;
    }
    
    public String getSequence(String Seq) {
        SequenceImpl s = new SequenceImpl(Seq, getDBTransaction());
        return s.getSequenceNumber().toString();
    }

    /**
     * Container's getter for xxdmInterfaceVO1.
     * @return xxdmInterfaceVO1
     */
    public ViewObjectImpl getxxdmInterfaceVO1() {
        return (ViewObjectImpl) findViewObject("xxdmInterfaceVO1");
    }

    /**
     * Container's getter for DynamicROVO1.
     * @return DynamicROVO1
     */
    public ViewObjectImpl getDynamicROVO1() {
        return (ViewObjectImpl) findViewObject("DynamicROVO1");
    }

    /**
     * Container's getter for xxfndLookupsView1.
     * @return xxfndLookupsView1
     */
    public ViewObjectImpl getxxfndLookupsView1() {
        return (ViewObjectImpl) findViewObject("xxfndLookupsView1");
    }

    /**
     * Container's getter for ExportInterfaceROVO1.
     * @return ExportInterfaceROVO1
     */
    public ViewObjectImpl getExportInterfaceROVO1() {
        return (ViewObjectImpl) findViewObject("ExportInterfaceROVO1");
    }
    
    public void invokeProcedure(String procedureName,String batchId){
        String stmt1 = " begin "+procedureName+"(:p_batchId); end;";
        CallableStatement cst = null;
        try {
            Number p_batchId = new Number(batchId);
            cst = this.getDBTransaction().createCallableStatement(stmt1, 0);
            cst.setObject("p_batchId", p_batchId);
            cst.executeUpdate();
        } catch (Exception e) {
            System.out.println("E Exception occured in Invoke Booking method" + e.getMessage());
        }
    }

    /**
     * Container's getter for DynamicTableROVO1.
     * @return DynamicTableROVO1
     */
    public ViewObjectImpl getDynamicTableROVO1() {
        return (ViewObjectImpl) findViewObject("DynamicTableROVO1");
    }
    
    public Map<String,ArrayList<String>> refreshAndExecuteVO(String ifaceId,String StagingTable,String batchId,String interfaceStatus){
        ViewObject vo = getxxdmexcelstgmappingROVO1();
        vo.applyViewCriteria(vo.getViewCriteriaManager().getViewCriteria("forDownload"));
        vo.setNamedWhereClauseParam("b_ifaceId", ifaceId);
        vo.setRangeSize(-1);
        vo.executeQuery();
        Row[] innerRows = vo.getAllRowsInRange();
        Row innerRow;
        Map<String,ArrayList<String>> returnMap = new HashMap<String,ArrayList<String>>();
        ArrayList<String> listObj = new ArrayList<String>(); 
        ArrayList<String> columnList = new ArrayList<String>();
        ArrayList<String> mandatoryList = new ArrayList<String>();
        listObj.add("ERROR MESSAGE");
        listObj.add("INTERFACE STATUS");
        columnList.add("ERR_DESCRIPTION");
        columnList.add("INTERFACE_STATUS_FLAG");
        mandatoryList.add("N");
        mandatoryList.add("N");
        for(int count=0;count<innerRows.length;count++){
            innerRow = innerRows[count];
            listObj.add((String)innerRow.getAttribute("PromptName")); 
            columnList.add((String)innerRow.getAttribute("StgColumnName")); 
            mandatoryList.add((String)innerRow.getAttribute("Mandatory"));
        }
        returnMap.put("promptName",listObj);
        returnMap.put("mandatory",mandatoryList);
        String columns = "";
        for(int i=0;i<columnList.size();i++){
        if(i==0){
            columns = columns.concat(columnList.get(i).toString());
        }
        else {
            columns = columns.concat(","+columnList.get(i).toString());
        }
        }
        String query = "SELECT "+columns+" FROM "+StagingTable+" WHERE BATCH_ID="+batchId;
        if(interfaceStatus!=null){
            query = query.concat(" AND INTERFACE_STATUS_FLAG='"+interfaceStatus+"'");
        }
        vo = this.findViewObject("DynamicTableROVO1");
        vo.remove();  
        vo = this.createViewObjectFromQueryStmt("DynamicTableROVO1", query);  
        vo.setRangeSize(-1);
        vo.executeQuery();
       return returnMap;
    }

    /**
     * Container's getter for ValidateProcessProcVO1.
     * @return ValidateProcessProcVO1
     */
    public ViewObjectImpl getValidateProcessProcVO1() {
        return (ViewObjectImpl) findViewObject("ValidateProcessProcVO1");
    }
    
    public String  parentInterfaceId(String parentInterfaceName){
        if(parentInterfaceName!=null){
            ViewObject vo = getInterfaceROVO1();
            vo.applyViewCriteria(vo.getViewCriteriaManager().getViewCriteria("byInterfaceName"),false);
            vo.setNamedWhereClauseParam("b_ifaceName", parentInterfaceName);
            vo.executeQuery();
            if(vo.getEstimatedRowCount()>0){
                Row row = vo.first();
                return row.getAttribute("IfaceId").toString();
            }
        }
        return null;
    }
}

